<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport"
				content="initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width">
	<!-- This policy allows everything (eg CSS, AJAX, object, frame, media, etc) except that
          * CSS only from the same origin and inline styles,
          * scripts only from the same origin and inline styles, and eval()
          -->
	<meta http-equiv="Content-Security-Policy"
				content="default-src * data: ;
						style-src 'self' 'unsafe-inline';
						script-src * 'self' 'unsafe-inline' 'unsafe-eval';
						font-src 'self' data: ;
						connect-src * 'self' data: 'unsafe-eval' ;">

	<title><%= htmlWebpackPlugin.options.pkg.description %></title>
</head>

<body class="six-river-wrap">
	<div>

		<h2>Robot Simulator</h2>
		<p>The application can read commands in following format (case insensitive):
		<dl>
			<dt>RESTART</dt>
			<dd>Clear the state and shuffle the goal and robot locations</dd>
			<dt>MOVE</dt>
			<dd>Move the robot one step forward</dd>
			<dt>LEFT</dt>
			<dd>Turn the robot 90 degrees to the left</dd>
			<dt>RIGHT</dt>
			<dd>Turn the robot 90 degrees to the right</dd>
			<dt>STEPAI</dt>
			<dd>Step the Behavior Tree once</dd>
			<dt>PLACE X,Y,F - where F is one of ['north', 'south', 'east', west']</dt>
			<dd>'Warp' the robot to a new position and orientation. This is 'cheating', but useful for debugging.</dd>
		</dl>

		<main>
			<div class="input-area">
				<label for="command">Enter Command:</label>
				<input type="text" id="command" placeholder="0 move" autofocus>
				<h4>Current Status:</h4>
				<div id="report"></div>
				<div id="error"></div>
			</div>
			<div class="field">
				<canvas id="c"></canvas>
			</div>
		</main>
	</div>
</body>

<!-- <%= htmlWebpackPlugin.options.pkg.name + ' v' + htmlWebpackPlugin.options.pkg.version + ' built on ' + new Date() %> -->
</html>
